#ifndef {{ name.upper() }}_HPP
#define {{ name.upper() }}_HPP

#include <iostream>
#include <string>
#include <unordered_map>

class {{ name }} {
public:
    enum class e_state {
        e_invalid,{% for the_state in state %}
        e_{{ the_state['name'] }}{% if not loop.last %},{% endif %}{% endfor %}
    };

    {% for the_state in state %}
    e_state f_ifsm_{{ the_state['name'] }}();{% endfor %}

    void f_fsm(void) {
        e_state the_next_state;
        switch(this->m_fsm.f_getState()) {
            {% for the_state in state %}
            case e_{{ the_state['name'] }} : {
                the_next_state = f_ifsm_{{ the_state['name'] }}();
                switch (the_next_state) { {% for the_out_state in the_state['out_state'] %}
                  case e_{{ the_out_state }} : {break;}  //nothing to do since already ok{% endfor %}
                  default : {the_next_state = e_invalid; break;}
                }
                break;
            }
            {% endfor %}
            default : {
                the_next_state = e_invalid; break;
            }
        }
        this->m_fsm.f_setState(the_next_state);
    }


private:
    s_base_fsm m_fsm;

};

#endif // {{ name.upper() }}_HPP