start: "@startuml" (skinparam | class_def | relationship)* "@enduml"

// Skinparam
skinparam: "skinparam" sparam svalue

// Classes
class_def: "class" CLASS_NAME ("extends" BASE_CLASS_NAME)? "{" class_element_list "}"

// Attribute Scope
var_scope: "{static}" -> static
         | "{abstract}" -> abstract

// Variables and Methods visibility
_visibility: VISIBILITY

// Variables or Functions
class_element_list: (class_element+)?
class_element: var_scope? _visibility variable
             | _visibility function
             | constructor
               
// Variables
variable: VAR_NAME ":" TYPE

// Functions
function: FUNC_NAME "(" param_list ")" ":" TYPE
param_list: (param ("," param)*)?
param: PARAM_NAME ":" TYPE

// Constructors
constructor: "<<constructor>>" CONSTRUCT_NAME "(" param_list ")"

// Relationships
relationship: RELATION_CLASS_NAME RELATION_LABEL? RELATION_ARROW RELATION_LABEL? RELATION_CLASS_NAME (":" RELATION_TEXT)?

// Arrow Heads


//RULES
sparam: CNAME
svalue: CNAME|WORD|ESCAPED_STRING|DIGIT

//TERMINALS
CLASS_NAME: CNAME
BASE_CLASS_NAME: CNAME
TYPE: (CNAME)("["|"]"|"*")*
VAR_NAME: CNAME
CONSTRUCT_NAME: ("~")?(CNAME)
FUNC_NAME: CNAME
PARAM_NAME: CNAME
VISIBILITY: ("+"  //-> public
           | "-"  //-> private
           | "#"  //-> protected
           | "~") //-> package
RELATION_LABEL: ESCAPED_STRING
RELATION_TEXT: CNAME|WORD|DIGIT|">"|"<"|ESCAPED_STRING
RELATION_CLASS_NAME: CNAME
RELATION_ARROW: ("<|--" // -> extension, same thing as inheritance
               | "*--"  // -> composition
               | "o--"  // -> aggregation
               | "--")  // -> use


%import common.CNAME
%import common.ESCAPED_STRING
%import common.WORD
%import common.DIGIT
%import common.LETTER
%import common.WS
%import common.WS_INLINE
%ignore WS
