// Mermaid Grammar in EBNF for Lark Earley Parser

?start: "``` mermaid" (class_diagram | sequence_diagram) * "```"

class_diagram: "classDiagram" (class_def | relationship | note)+
sequence_diagram: "sequenceDiagram" (class_def | relationship | note)+

//class_def: "class" CNAME ("{" class_body? "}")?
class_def: "class" CLASS_NAME ("{" class_element_list "}")?

// Attribute Scope
var_scope: "{static}" -> static
         | "{abstract}" -> abstract

// Variables and Methods visibility
_visibility: VISIBILITY

// Variables or Functions
class_element_list: (class_element+)?
class_element: var_scope? _visibility variable
             | _visibility function
             | constructor
               
// Variables
variable: TYPE VAR_NAME

// Functions
function: TYPE FUNC_NAME "(" param_list ")"
param_list: (param ("," param)*)?
param: TYPE PARAM_NAME

// Constructors
constructor: "<<constructor>>" CONSTRUCT_NAME "(" param_list ")"

// Relationships
relationship: RELATION_CLASS_NAME_BEFORE RELATION_ARROW RELATION_CLASS_NAME_AFTER

//class_body: (attribute | method)*
//attribute: CNAME ":" CNAME
//method: CNAME "(" [param_list] ")" (":" CNAME)?
//param_list: CNAME ("," CNAME)*

//relation: CNAME relation_type CNAME
//relation_type: "<|--" | "-->" | "<--" | "--" | "o--" | "*--" | "o<--" | "*<--"

note: "note" "for" CNAME ":" /.+/

//RULES
sparam: CNAME
svalue: CNAME|WORD|ESCAPED_STRING|DIGIT

//TERMINALS
CLASS_NAME: CNAME
BASE_CLASS_NAME: CNAME
TYPE: (CNAME)("["|"]"|"*")*
VAR_NAME: CNAME
CONSTRUCT_NAME: ("~")?(CNAME)
FUNC_NAME: CNAME
PARAM_NAME: CNAME
VISIBILITY: ("+"  //-> public
           | "-"  //-> private
           | "#")  //-> protected
RELATION_CLASS_NAME_BEFORE: (CNAME)
RELATION_CLASS_NAME_AFTER: CNAME
RELATION_ARROW: ("<|--" // -> extension, same thing as inheritance
               | "*--"  // -> composition
               | "o--"  // -> aggregation
               | "--")  // -> use
COMMENT: /\/\/[^\n]*/
%ignore COMMENT
%import common.CNAME
%import common.ESCAPED_STRING
%import common.WORD
%import common.DIGIT
%import common.LETTER
%import common.WS
%import common.WS_INLINE
%ignore WS
